###############################################################################
### Builtins
###############################################################################

[[test_main]]
id = 'builtin-echo'
cmd = "stepwise echo '- A\\n- B'"
env = {}
stdout = '''
^{DATE}

\$ stepwise echo '- A\\n- B'

1\. A

2\. B
'''
stderr = '^$'
return_code = 0

[[test_main]]
id = 'builtin-custom'
cmd = "stepwise custom 'A;B~b'"
env = {}
stdout = '''
^{DATE}

\$ stepwise custom 'A;B~b'

1\. A

2\. B

   - b
'''
stderr = '^$'
return_code = 0

[[test_main]]
id = 'builtin-custom-wrap'
cmd = "stepwise custom '123456789 123456789 123456789 123456789 123456789 123456789~123456789 123456789 123456789 123456789 123456789 123456789'"
env = {}
stdout = '''
^{DATE}

\$ stepwise custom '123456789 123456789 123456789 123456789 123456789 123456789~123456789 123456789 123456789 123456789 123456789 123456789'

1\. 123456789 123456789 123456789 123456789 123456789
   123456789

   - 123456789 123456789 123456789 123456789
     123456789 123456789
'''
stderr = '^$'
return_code = 0

[[test_main]]
id = 'builtin-custom-no-wrap'
cmd = "stepwise custom -W '123456789 123456789 123456789 123456789 123456789 123456789~123456789 123456789 123456789 123456789 123456789 123456789'"
env = {}
stdout = '''
^{DATE}

\$ stepwise custom -W '123456789 123456789 123456789 123456789 123456789 123456789~123456789 123456789 123456789 123456789 123456789 123456789'

1\. 123456789 123456789 123456789 123456789 123456789 123456789

   - 123456789 123456789 123456789 123456789 123456789 123456789
'''
stderr = '^$'
return_code = 0

[[test_main]]
id = 'builtin-custom-delimiter'
cmd = "stepwise custom -dx 'AxB~b'"
env = {}
stdout = '''
^{DATE}

\$ stepwise custom -dx 'AxB~b'

1\. A

2\. B

   - b
'''
stderr = '^$'
return_code = 0

[[test_main]]
id = 'builtin-custom-subdelimiter'
cmd = "stepwise custom -Dx 'A;Bxb'"
env = {}
stdout = '''
^{DATE}

\$ stepwise custom -Dx 'A;Bxb'

1\. A

2\. B

   - b
'''
stderr = '^$'
return_code = 0


###############################################################################
### Pipes
###############################################################################

[[test_main]]
id = 'pipeline-2'
cmd = "stepwise custom A | stepwise custom B"
env = {}
stdout = '''
^{DATE}

\$ stepwise custom A
\$ stepwise custom B

1\. A

2\. B
'''
stderr = '^$'
return_code = 0

[[test_main]]
id = 'pipeline-3'
cmd = "stepwise custom A | stepwise custom B | stepwise custom C"
env = {}
stdout = '''
^{DATE}

\$ stepwise custom A
\$ stepwise custom B
\$ stepwise custom C

1\. A

2\. B

3\. C
'''
stderr = '^$'
return_code = 0

[[test_main]]
id = 'pipeline-nested'
cmd = "stepwise nested A | stepwise nested B | stepwise nested C"
env = {}
stdout = '''
^{DATE}

\$ stepwise nested A
\$ stepwise nested B
\$ stepwise nested C

1\. A

2\. B

3\. C
'''
stderr = '^$'
return_code = 0

[[test_main]]
id = 'heredoc'
cmd = '''
stepwise <<EOF
- A
- B
EOF
'''
env = {}
stdout = '''
^{DATE}

1\. A

2\. B
'''
stderr = '^$'
return_code = 0


###############################################################################
### Errors
###############################################################################

[[test_main]]
id = 'err-empty-protocol'
cmd = "stepwise echo ''"
env = {}
# The expected output is "... echo ''" (two quotes, not one), but there's a bug 
# in the `toml` regarding how '' is parsed in ''' strings.  See #284.
stdout = '''
^{DATE}

\$ stepwise echo '
'''
stderr = '''
.*stepwise warning.*echo.* protocol is empty.
'''
return_code = 0

[[test_main]]
id = 'err-unknown-protocol'
cmd = "stepwise unknown-protocol"
env = {}
stdout = '^$'
stderr = '''
.*stepwise error.*
    no protocols matching 'unknown-protocol' in:
'''
return_code = 1

[[test_main]]
id = 'err-formatting'
cmd = "stepwise echo 'Formatting error'"
env = {}
stdout = '''
^Formatting error$
'''
stderr = '''
.*stepwise warning.*the protocol could not be properly rendered due to error\(s\):
.*stepwise warning.*echo, 1.*
    expected a step \(e.g. '- …' or '1. …'\), not 'Formatting error'
'''
return_code = 1


###############################################################################
### Subcommands
###############################################################################

[[test_main]]
id = 'ls'
cmd = "stepwise ls"
env = {}
stdout = '''
.*/dummy_home/protocols
  a
  b
.*\
stepwise\.builtins
  custom
  echo
'''
stderr = '^$'
return_code = 0

[[test_main]]
id = 'ls-d'
cmd = "stepwise ls -d"
env = {}
stdout = '''
.*/dummy_home/protocols
.*\
stepwise\.builtins
'''
stderr = '^$'
return_code = 0

[[test_main]]
id = 'ls-p'
cmd = "stepwise ls -p"
env = {}
stdout = '''
a
b
.*\
custom
echo
'''
stderr = '^$'
return_code = 0

[[test_main]]
id = 'edit'
cmd = "stepwise edit echo"
env = {EDITOR = 'echo'}
stdout = '.*/builtins/echo.py$'
stderr = '^$'
return_code = 0

[[test_main]]
id = 'note-defaults-1'
cmd = "stepwise custom A: | stepwise note Z"
env = {}
stdout = '''
^{DATE}

\$ stepwise custom A:

1\. A \[1\]:

Note:
\[1\] Z
'''
stderr = '^$'
return_code = 0

[[test_main]]
id = 'note-defaults-2'
cmd = "stepwise custom 'A:;B:' | stepwise note Z"
env = {}
stdout = '''
^{DATE}

\$ stepwise custom 'A:;B:'

1\. A:

2\. B \[1\]:

Note:
\[1\] Z
'''
stderr = '^$'
return_code = 0

[[test_main]]
id = 'note-where'
cmd = "stepwise custom 'A:;B:' | stepwise note Z A"
env = {}
stdout = '''
^{DATE}

\$ stepwise custom 'A:;B:'

1\. A \[1\]:

2\. B:

Note:
\[1\] Z
'''
stderr = '^$'
return_code = 0

[[test_main]]
id = 'note-wrap'
cmd = "stepwise custom A: | stepwise note '123456789 123456789 123456789 123456789 123456789 123456789'"
env = {}
stdout = '''
^{DATE}

\$ stepwise custom A:

1\. A \[1\]:

Note:
\[1\] 123456789 123456789 123456789 123456789 123456789
    123456789
'''
stderr = '^$'
return_code = 0

[[test_main]]
id = 'note-no-wrap'
cmd = "stepwise custom A: | stepwise note -W '123456789 123456789 123456789 123456789 123456789 123456789'"
env = {}
stdout = '''
^{DATE}

\$ stepwise custom A:

1\. A \[1\]:

Note:
\[1\] 123456789 123456789 123456789 123456789 123456789 123456789
'''
stderr = '^$'
return_code = 0

[[test_main]]
id = 'which'
cmd = "stepwise which a"
env = {}
stdout = '.*/dummy_home/protocols/a.txt$'
stderr = '^$'
return_code = 0

[[test_main]]
id = 'config'
cmd = "stepwise config printer.default.page_height"
env = {}
stdout = 'page_height = 56'
stderr = '^$'
return_code = 0


