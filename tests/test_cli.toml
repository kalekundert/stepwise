###############################################################################
### Builtins
###############################################################################

[[test_main]]
id = 'builtin-echo'
cmd = "sw echo '- A\\n- B'"
env = {}
stdout = '''
^{DATE}

\$ sw echo '- A\\n- B'

1\. A

2\. B
'''
stderr = '^$'
return_code = 0

[[test_main]]
id = 'builtin-step'
cmd = "sw step A"
env = {}
stdout = '''
^{DATE}

\$ sw step A

1\. A
'''
stderr = '^$'
return_code = 0

[[test_main]]
id = 'builtin-step'
cmd = "sw step 'A~b~~c~~d~e~~f~~g'"
env = {}
stdout = '''
^{DATE}

\$ sw step 'A~b~~c~~d~e~~f~~g'

1\. A

   - b
     - c
     - d
   - e
     - f
     - g
'''
stderr = '^$'
return_code = 0

[[test_main]]
id = 'builtin-step-wrap'
cmd = "sw step '123456789 123456789 123456789 123456789 123456789 123456789~123456789 123456789 123456789 123456789 123456789 123456789'"
env = {}
stdout = '''
^{DATE}

\$ sw step '123456789 123456789 123456789 123456789 123456789 123456789~123456789 123456789 123456789 123456789 123456789 123456789'

1\. 123456789 123456789 123456789 123456789 123456789
   123456789

   - 123456789 123456789 123456789 123456789
     123456789 123456789
'''
stderr = '^$'
return_code = 0

[[test_main]]
id = 'builtin-step-no-wrap'
cmd = "sw step -W '123456789 123456789 123456789 123456789 123456789 123456789~123456789 123456789 123456789 123456789 123456789 123456789'"
env = {}
stdout = '''
^{DATE}

\$ sw step -W '123456789 123456789 123456789 123456789 123456789 123456789~123456789 123456789 123456789 123456789 123456789 123456789'

1\. 123456789 123456789 123456789 123456789 123456789 123456789

   - 123456789 123456789 123456789 123456789 123456789 123456789
'''
stderr = '^$'
return_code = 0

[[test_main]]
id = 'builtin-step-delimiter'
cmd = "sw step -dx 'Axb~c'"
env = {}
stdout = '''
^{DATE}

\$ sw step -dx 'Axb~c'

1\. A

   - b~c
'''
stderr = '^$'
return_code = 0

[[test_main]]
id = 'builtin-conditions'
cmd = "sw conditions conditions.csv"
env = {}
stdout = '''
^{DATE}

\$ sw conditions conditions\.csv

1\. In the following steps, setup these conditions:

   Condition A:  −  −  \+  \+
   Condition B:  −  \+  −  \+
'''
stderr = '^$'
return_code = 0

[[test_main]]
id = 'builtin-conditions'
cmd = "sw conditions conditions.xlsx"
env = {}
stdout = '''
^{DATE}

\$ sw conditions conditions\.xlsx

1\. In the following steps, setup these conditions:

   Condition A:  −  −  \+  \+
   Condition B:  −  \+  −  \+
'''
stderr = '^$'
return_code = 0

[[test_main]]
id = 'builtin-conditions'
cmd = "sw conditions does_not_exist.csv"
env = {}
stdout = '^$'
stderr = '.*sw error.*does_not_exist.csv.*no such file'
return_code = 1

[[test_main]]
id = 'builtin-reaction'
cmd = "sw reaction 'A;;to 10 µL' 'B;10x;1 µL'"
env = {}
stdout = '''
^{DATE}

\$ sw reaction 'A;;to 10 µL' 'B;10x;1 µL'

1. Setup 1 reaction:

   Reagent  Stock    Volume
   ────────────────────────
   A                9.00 µL
   B          10x   1.00 µL
   ────────────────────────
                   10.00 µL
'''
stderr = '^$'
return_code = 0

[[test_main]]
id = 'builtin-reaction-title'
cmd = "sw reaction 'A;;to 10 µL' 'B;10x;1 µL' -t AB"
env = {}
stdout = '''
^{DATE}

\$ sw reaction 'A;;to 10 µL' 'B;10x;1 µL' -t AB

1. Setup 1 AB reaction:

   Reagent  Stock    Volume
   ────────────────────────
   A                9.00 µL
   B          10x   1.00 µL
   ────────────────────────
                   10.00 µL
'''
stderr = '^$'
return_code = 0

[[test_main]]
id = 'builtin-reaction-mm'
cmd = "sw reaction 'A;;to 10 µL;y' 'B;10x;1 µL' -n2"
env = {}
stdout = '''
^{DATE}

\$ sw reaction 'A;;to 10 µL;y' 'B;10x;1 µL' -n2

1. Setup 2 reactions:

   Reagent  Stock    Volume      2.2x
   ──────────────────────────────────
   A                9.00 µL  19.80 µL
   B          10x   1.00 µL
   ──────────────────────────────────
                   10.00 µL   9.00 µL/rxn
'''
stderr = '^$'
return_code = 0


###############################################################################
### Pipes
###############################################################################

[[test_main]]
id = 'pipeline-2'
cmd = "sw step A | sw step B"
env = {}
stdout = '''
^{DATE}

\$ sw step A
\$ sw step B

1\. A

2\. B
'''
stderr = '^$'
return_code = 0

[[test_main]]
id = 'pipeline-3'
cmd = "sw step A | sw step B | sw step C"
env = {}
stdout = '''
^{DATE}

\$ sw step A
\$ sw step B
\$ sw step C

1\. A

2\. B

3\. C
'''
stderr = '^$'
return_code = 0

[[test_main]]
id = 'pipeline-nested'
cmd = "sw nested A | sw nested B | sw nested C"
env = {}
stdout = '''
^{DATE}

\$ sw nested A
\$ sw nested B
\$ sw nested C

1\. A

2\. B

3\. C
'''
stderr = '^$'
return_code = 0

[[test_main]]
id = 'heredoc'
cmd = '''
sw <<EOF
- A
- B
EOF
'''
env = {}
stdout = '''
^{DATE}

1\. A

2\. B
'''
stderr = '^$'
return_code = 0


###############################################################################
### Errors
###############################################################################

[[test_main]]
id = 'err-empty-protocol'
cmd = "sw echo ''"
env = {}
# The expected output is "... echo ''" (two quotes, not one), but there's a bug 
# in the `toml` regarding how '' is parsed in ''' strings.  See #284.
stdout = '''
^{DATE}

\$ sw echo '
'''
stderr = '''
.*sw warning.*echo.* protocol is empty.
'''
return_code = 0

[[test_main]]
id = 'err-unknown-protocol'
cmd = "sw unknown-protocol"
env = {}
stdout = '^$'
stderr = '''
.*sw error.*
    no protocols matching 'unknown-protocol' in:
'''
return_code = 1

[[test_main]]
id = 'err-formatting'
cmd = "sw echo 'Formatting error'"
env = {}
stdout = '''
^Formatting error$
'''
stderr = '''
.*sw warning.*the protocol could not be properly rendered due to error\(s\):
.*sw warning.*echo, 1.*expected a step \(e.g. '- …' or '1. …'\), not 'Formatting error'
'''
return_code = 1


###############################################################################
### Subcommands
###############################################################################

[[test_main]]
id = 'ls'
cmd = "sw ls"
env = {}
stdout = '''
.*/dummy_home/protocols
  a
  b
.*\
stepwise\.builtins
  conditions
  echo
  reaction
  step
'''
stderr = '^$'
return_code = 0

[[test_main]]
id = 'ls-d'
cmd = "sw ls -d"
env = {}
stdout = """
.*/dummy_home/protocols\
.*\
stepwise\\.builtins
"""
stderr = '^$'
return_code = 0

[[test_main]]
id = 'ls-p'
cmd = "sw ls -p"
env = {}
stdout = '''
a
b
.*\
conditions
echo
reaction
step
'''
stderr = '^$'
return_code = 0

[[test_main]]
id = 'edit'
cmd = "sw edit echo"
env = {EDITOR = 'echo'}
stdout = '.*/builtins/echo.py$'
stderr = '^$'
return_code = 0

[[test_main]]
id = 'note-defaults-1'
cmd = "sw step A: | sw note Z"
env = {}
stdout = '''
^{DATE}

\$ sw step A:

1\. A \[1\]:

Note:
\[1\] Z
'''
stderr = '^$'
return_code = 0

[[test_main]]
id = 'note-defaults-2'
cmd = "sw step A: | sw step B: | sw note Z"
env = {}
stdout = '''
^{DATE}

\$ sw step A:
\$ sw step B:

1\. A:

2\. B \[1\]:

Note:
\[1\] Z
'''
stderr = '^$'
return_code = 0

[[test_main]]
id = 'note-where'
cmd = "sw step A: | sw step B: | sw note Z A"
env = {}
stdout = '''
^{DATE}

\$ sw step A:
\$ sw step B:

1\. A \[1\]:

2\. B:

Note:
\[1\] Z
'''
stderr = '^$'
return_code = 0

[[test_main]]
id = 'note-wrap'
cmd = "sw step A: | sw note '123456789 123456789 123456789 123456789 123456789 123456789'"
env = {}
stdout = '''
^{DATE}

\$ sw step A:

1\. A \[1\]:

Note:
\[1\] 123456789 123456789 123456789 123456789 123456789
    123456789
'''
stderr = '^$'
return_code = 0

[[test_main]]
id = 'note-no-wrap'
cmd = "sw step A: | sw note -W '123456789 123456789 123456789 123456789 123456789 123456789'"
env = {}
stdout = '''
^{DATE}

\$ sw step A:

1\. A \[1\]:

Note:
\[1\] 123456789 123456789 123456789 123456789 123456789 123456789
'''
stderr = '^$'
return_code = 0

[[test_main]]
id = 'note-merge'
cmd = "sw step 'A:' | sw note X | sw note Y"
env = {}
stdout = '''
^{DATE}

\$ sw step A:

1\. A \[1,2\]:

Notes:
\[1\] X

\[2\] Y
'''
stderr = '^$'
return_code = 0

[[test_main]]
id = 'which'
cmd = "sw which a"
env = {}
stdout = '.*/dummy_home/protocols/a.txt$'
stderr = '^$'
return_code = 0

