# Library tests:
[[test_library_find_entries]]
collections = []
tag = 'proto'
expected = []

[[test_library_find_entries]]
collections = ['1']
tag = 'a'
expected = ['protocol_a']

[[test_library_find_entries]]
collections = ['1']
tag = 'z'
expected = []

[[test_library_find_entries]]
collections = ['1']
tag = 'proto'
expected = ['protocol_a', 'subdir/protocol_b']

[[test_library_find_entries]]
collections = ['2']
tag = 'a'
expected = []

[[test_library_find_entries]]
collections = ['2']
tag = 'z'
expected = ['protocol_z']

[[test_library_find_entries]]
collections = ['2']
tag = 'proto'
expected = ['protocol_z']

[[test_library_find_entries]]
collections = ['1', '2']
tag = 'a'
expected = ['protocol_a']

[[test_library_find_entries]]
collections = ['1', '2']
tag = 'z'
expected = ['protocol_z']

[[test_library_find_entries]]
collections = ['1', '2']
tag = 'proto'
expected = ['protocol_a', 'subdir/protocol_b', 'protocol_z']


# Collection tests:
[[test_collection_is_unique]]
name = 'a'
names = []
expected = true

[[test_collection_is_unique]]
name = 'a'
names = ['a']
expected = false

[[test_collection_is_unique]]
name = 'a'
names = ['b']
expected = true

[[test_collection_is_unique]]
name = 'a'
names = ['a', 'b']
expected = false

[[test_path_collection_find_entries]]
tag = 'no match'
expected = []

[[test_path_collection_find_entries]]
tag = 'a'
expected = ['protocol_a']

[[test_path_collection_find_entries]]
tag = 'b'
expected = ['subdir/protocol_b']

[[test_path_collection_find_entries]]
tag = 'proto'
expected = ['protocol_a', 'subdir/protocol_b']

[[test_path_collection_find_entries]]
tag = 'dir/proto'
expected = ['subdir/protocol_b']

[[test_cwd_collection_find_entries]]
tag = 'a'
expected = []

[[test_cwd_collection_find_entries]]
tag = 'protocol_a.txt'
expected = ['protocol_a']

[[test_cwd_collection_find_entries]]
tag = 'protocol_b.txt'
expected = []

[[test_cwd_collection_find_entries]]
tag = 'subdir/protocol_b.txt'
expected = ['subdir/protocol_b']


# Entry tests:
[[test_entry_full_name]]
collection_name = 'a'
entry_name = 'b'
full_name = 'a/b'

[[test_entry_full_name]]
collection_name = 'a/'
entry_name = 'b/'
full_name = 'a/b'

[[test_path_entry_load_protocol]]
relpath = 'protocol_txt.txt'
args = []
steps = ["txt"]
attachments = []
skip_windows = false

[[test_path_entry_load_protocol]]
relpath = 'protocol_pdf.pdf'
args = []
steps = ["<protocol_pdf>"]
attachments = ["protocol_pdf.pdf"]
skip_windows = false

[[test_path_entry_load_protocol]]
relpath = 'script_echo.sh'
args = ["1", "2"]
steps = ["echo 1 2"]
attachments = []
skip_windows = "Cannot run Unix shell scripts on Windows."

[[test_path_entry_load_protocol]]
relpath = 'script_nested.sh'
args = []
steps = ["nested"]
attachments = []
skip_windows = "Cannot run Unix shell scripts on Windows."

[[test_path_entry_load_protocol]]
relpath = 'script_stdin.sh'
args = []
steps = ["cat"]
attachments = []
skip_windows = "Cannot run Unix shell scripts on Windows."

[[test_path_entry_load_protocol]]
relpath = 'script_py.py'
args = []
steps = ["py"]
attachments = []
skip_windows = false

[[test_path_entry_load_protocol]]
relpath = 'script_main.py'
args = []
steps = ["main"]
attachments = []
skip_windows = false

[[test_path_entry_load_protocol]]
relpath = 'script_argv.py'
args = ["1", "2"]
steps = ["argv script_argv.py,1,2"]
attachments = []
skip_windows = false

[[test_path_entry_load_protocol]]
relpath = 'script_import.py'
args = []
steps = ["lib"]
attachments = []
skip_windows = false

[[test_path_entry_load_protocol]]
id = 'focus'
relpath = 'script_load.py'
args = []
steps = ["load", "main", "argv script_argv.py,1,2", "lib"]
attachments = []
skip_windows = false

[[test_path_entry_load_protocol]]
relpath = 'script_subproc.py'
args = []
steps = ["os.system", "subprocess.run"]
attachments = []
skip_windows = "Cannot use 'echo' on Windows."

[[test_path_entry_load_protocol]]
relpath = 'script_subproc_nested.py'
args = []
steps = ["nested"]
attachments = []
skip_windows = "Not totally sure why this one doesn't work."

[[test_path_entry_load_protocol]]
relpath = 'script_subproc_stdin.py'
args = []
steps = ["cat"]
attachments = []
skip_windows = false


# Tag-matching tests:
## None
[[test_match_entry]]
tag = ''
name = 'a'
expected = [0]

[[test_match_entry]]
tag = ''
name = 'a/b'
expected = [0]

[[test_match_entry]]
tag = ''
name = 'a/b/c'
expected = [0]


## One part
[[test_match_entry]]
tag = 'ab'
name = 'ab'
expected = [3]

[[test_match_entry]]
tag = 'a'
name = 'ab'
expected = [2]

[[test_match_entry]]
tag = 'b'
name = 'ab'
expected = [1]

[[test_match_entry]]
tag = 'z'
name = 'abc'
expected = []


## Two parts
[[test_match_entry]]
tag = 'ab'
name = 'ab/cd'
expected = []

[[test_match_entry]]
tag = 'cd'
name = 'ab/cd'
expected = [3]

[[test_match_entry]]
tag = 'a'
name = 'ab/cd'
expected = []

[[test_match_entry]]
tag = 'b'
name = 'ab/cd'
expected = []

[[test_match_entry]]
tag = 'c'
name = 'ab/cd'
expected = [2]

[[test_match_entry]]
tag = 'd'
name = 'ab/cd'
expected = [1]

[[test_match_entry]]
tag = 'z'
name = 'ab/cd'
expected = []

[[test_match_entry]]
tag = 'ab/cd'
name = 'ab/cd'
expected = [3, 3]

[[test_match_entry]]
tag = 'ab/c'
name = 'ab/cd'
expected = [2, 3]

[[test_match_entry]]
tag = 'ab/d'
name = 'ab/cd'
expected = [1, 3]

[[test_match_entry]]
tag = 'ab/z'
name = 'ab/cd'
expected = []

[[test_match_entry]]
tag = 'a/cd'
name = 'ab/cd'
expected = [3, 2]

[[test_match_entry]]
tag = 'a/c'
name = 'ab/cd'
expected = [2, 2]

[[test_match_entry]]
tag = 'a/d'
name = 'ab/cd'
expected = [1, 2]

[[test_match_entry]]
tag = 'a/z'
name = 'ab/cd'
expected = []

[[test_match_entry]]
tag = 'b/cd'
name = 'ab/cd'
expected = [3, 1]

[[test_match_entry]]
tag = 'b/c'
name = 'ab/cd'
expected = [2, 1]

[[test_match_entry]]
tag = 'b/d'
name = 'ab/cd'
expected = [1, 1]

[[test_match_entry]]
tag = 'b/z'
name = 'ab/cd'
expected = []

[[test_match_entry]]
tag = 'z/cd'
name = 'ab/cd'
expected = []

[[test_match_entry]]
tag = 'z/c'
name = 'ab/cd'
expected = []

[[test_match_entry]]
tag = 'z/d'
name = 'ab/cd'
expected = []

[[test_match_entry]]
tag = 'z/z'
name = 'ab/cd'
expected = []

[[test_match_entry]]
tag = 'a/a'
name = 'a'
expected = []


## Three parts
[[test_match_entry]]
tag = 'a/b'
name = 'a/b/c'
expected = []

[[test_match_entry]]
tag = 'a/c'
name = 'a/b/c'
expected = [3, 0, 3]

[[test_match_entry]]
tag = 'b/c'
name = 'a/b/c'
expected = [3, 3]


## Redundancy
[[test_match_entry]]
tag = 'a'
name = 'ab/bc'
expected = []

[[test_match_entry]]
tag = 'b'
name = 'ab/bc'
expected = [2]

[[test_match_entry]]
tag = 'c'
name = 'ab/bc'
expected = [1]

[[test_match_entry]]
tag = 'a/b'
name = 'ab/bc'
expected = [2, 2]

[[test_match_entry]]
tag = 'b/a'
name = 'ab/bc'
expected = []

[[test_match_entry]]
tag = 'b/b'
name = 'ab/bc'
expected = [2, 1]

[[test_match_entry]]
tag = 'b/c'
name = 'ab/bc'
expected = [1, 1]

[[test_match_entry]]
tag = 'c/b'
name = 'ab/bc'
expected = []

