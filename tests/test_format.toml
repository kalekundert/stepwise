# Strings

[[test_format_text]]
id = 'str-empty'
obj = '""'
width = 5
expected = ""

[[test_format_text]]
id = 'str-wrap-1'
obj = '"a b c"'
width = 1
expected = "a\nb\nc"

[[test_format_text]]
id = 'str-wrap-2'
obj = '"a b c"'
width = 2
expected = "a\nb\nc"

[[test_format_text]]
id = 'str-wrap-3'
obj = '"a b c"'
width = 3
expected = "a b\nc"

[[test_format_text]]
id = 'str-wrap-4'
obj = '"a b c"'
width = 4
expected = "a b\nc"

[[test_format_text]]
id = 'str-wrap-5'
obj = '"a b c"'
width = 5
expected = "a b c"

[[test_format_text]]
id = 'str-wrap-inf'
obj = '"a b c"'
width = inf
expected = "a b c"

[[test_format_text]]
id = 'str-trailing-space'
# This tests two things:
# - All trailing spaces are trimmed, so that lines don't get wrapped 
#   unnecessarily in the terminal.
# - Lines with trailing spaces are don't get an extra space when joined with 
#   the line below.  This is the default behavior of textwrap, so we have to 
#   work around it.
obj = '"a \nb \nc"'
width = 3
expected = "a b\nc"

[[test_format_text]]
id = 'str-trailing-space'
obj = '"a \nb \nc"'
width = 5
expected = "a b c"

[[test_format_text]]
id = 'str-leading-space'
obj = '" a\n b\n c"'
width = 3
expected = "a b\nc"

[[test_format_text]]
id = 'str-leading-space'
obj = '" a\n b\n c"'
width = 5
expected = "a b c"

[[test_format_text]]
id = 'str-no-wrap-references'
obj = '"[1]"'
width = 1
expected = "[1]"


[[test_replace_text]]
id = 'str-empty'
obj = '""'
pattern = '\d'
repl = '2'
count = 0
expected = '""'
n = 0

[[test_replace_text]]
id = 'str-sub-0'
obj = '"a"'
pattern = '\d'
repl = '2'
count = 0
expected = '"a"'
n = 0

[[test_replace_text]]
id = 'str-sub-1'
obj = '"[1]"'
pattern = '\d'
repl = '2'
count = 0
expected = '"[2]"'
n = 1

[[test_replace_text]]
id = 'str-sub-2'
obj = '"[1] [1]"'
pattern = '\d'
repl = '2'
count = 0
expected = '"[2] [2]"'
n = 2

[[test_replace_text]]
id = 'str-count-1'
obj = '"[1] [1]"'
pattern = '\d'
repl = '2'
count = 1
expected = '"[2] [1]"'
n = 1

[[test_replace_text]]
id = 'str-count-2'
obj = '"[1] [1]"'
pattern = '\d'
repl = '2'
count = 2
expected = '"[2] [2]"'
n = 2

[[test_replace_text]]
id = 'str-count-3'
obj = '"[1] [1]"'
pattern = '\d'
repl = '2'
count = 3
expected = '"[2] [2]"'
n = 2


# Paragraph lists

[[test_format_text]]
id = 'pl-items-0'
obj = '''
pl()
'''
width = inf
expected = ""

[[test_format_text]]
id = 'pl-items-1'
obj = '''
pl('a')
'''
width = inf
expected = "a"

[[test_format_text]]
id = 'pl-items-2'
obj = '''
pl('a', 'b')
'''
width = inf
expected = """
a

b"""

[[test_format_text]]
id = 'pl-items-falsy'
obj = '''
pl('a', '')
'''
width = 3
expected = "a"

[[test_format_text]]
id = 'pl-items-falsy'
obj = '''
pl('a', None)
'''
width = 3
expected = "a"

[[test_format_text]]
id = 'pl-items-falsy'
obj = '''
pl('a', pl())
'''
width = 3
expected = "a"

[[test_format_text]]
id = 'pl-wrap-1'
obj = '''
pl('a b c', 'd e f')
'''
width = 1
expected = """
a
b
c

d
e
f"""

[[test_format_text]]
id = 'pl-wrap-2'
obj = '''
pl('a b c', 'd e f')
'''
width = 2
expected = """
a
b
c

d
e
f"""

[[test_format_text]]
id = 'pl-wrap-3'
obj = '''
pl('a b c', 'd e f')
'''
width = 3
expected = """
a b
c

d e
f"""

[[test_format_text]]
id = 'pl-wrap-4'
obj = '''
pl('a b c', 'd e f')
'''
width = 4
expected = """
a b
c

d e
f"""

[[test_format_text]]
id = 'pl-wrap-5'
obj = '''
pl('a b c', 'd e f')
'''
width = 5
expected = """
a b c

d e f"""

[[test_format_text]]
id = 'pl-wrap-inf'
obj = '''
pl('a b c', 'd e f')
'''
width = inf
expected = """
a b c

d e f"""

[[test_format_text]]
id = 'pl-args-br'
obj = '''
pl('a', 'b', br='\n')
'''
width = inf
expected = """
a
b"""

[[test_format_text]]
id = 'pl-nested-pl'
obj = '''
pl('a', pl('b', 'c'))
'''
width = inf
expected = """
a

b

c"""

[[test_format_text]]
id = 'pl-nested-ul'
obj = '''
pl('a', ul('b', 'c'))
'''
width = inf
expected = """
a

- b
- c"""

[[test_format_text]]
id = 'pl-nested-ol'
obj = '''
pl('a', ol('b', 'c'))
'''
width = inf
expected = """
a

1. b

2. c"""

[[test_format_text]]
id = 'pl-nested-dl'
obj = '''
pl('a', dl(('b', 'c'), ('d', 'e')))
'''
width = inf
expected = """
a

b: c
d: e"""

[[test_format_text]]
id = 'pl-nested-table'
obj = '''
pl('a', table([['b', 'c'], ['d', 'e']]))
'''
width = inf
expected = """
a

b  c
d  e"""

[[test_format_text]]
id = 'pl-nested-pre'
obj = '''
pl('a b c', pre('d e f'))
'''
width = 3
expected = """
a b
c

d e f"""

[[test_format_text_indents]]
id = 'pl'
obj = '''
pl('a b', 'c d')
'''
width = inf
initial_indent = '>'
subsequent_indent = ''
expected = """
>a b

c d"""
  
[[test_format_text_indents]]
id = 'pl'
obj = '''
pl('a b', 'c d')
'''
width = inf
initial_indent = ''
subsequent_indent = '>'
expected = """
a b

>c d"""

[[test_format_text_indents]]
id = 'pl'
obj = '''
pl('a b', 'c d')
'''
width = inf
initial_indent = '>'
subsequent_indent = '>'
expected = """
>a b

>c d"""


[[test_replace_text]]
id = 'pl-empty'
obj = '''
pl()
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
pl()
'''
n = 0

[[test_replace_text]]
id = 'pl-falsy'
obj = '''
pl('')
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
pl('')
'''
n = 0

[[test_replace_text]]
id = 'pl-falsy'
obj = '''
pl(None)
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
pl(None)
'''
n = 0

[[test_replace_text]]
id = 'pl-falsy'
obj = '''
pl(pl())
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
pl(pl())
'''
n = 0

[[test_replace_text]]
id = 'pl-sub-0'
obj = '''
pl('a')
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
pl('a')
'''
n = 0

[[test_replace_text]]
id = 'pl-sub-1'
obj = '''
pl('[1]')
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
pl('[2]')
'''
n = 1

[[test_replace_text]]
id = 'pl-sub-2'
obj = '''
pl('[1]', '[1]')
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
pl('[2]', '[2]')
'''
n = 2

[[test_replace_text]]
id = 'pl-count-1'
obj = '''
pl('[1] [1]', '[1] [1]')
'''
pattern = '\d'
repl = '2'
count = 1
expected = '''
pl('[2] [1]', '[1] [1]')
'''
n = 1

[[test_replace_text]]
id = 'pl-count-2'
obj = '''
pl('[1] [1]', '[1] [1]')
'''
pattern = '\d'
repl = '2'
count = 2
expected = '''
pl('[2] [2]', '[1] [1]')
'''
n = 2

[[test_replace_text]]
id = 'pl-count-3'
obj = '''
pl('[1] [1]', '[1] [1]')
'''
pattern = '\d'
repl = '2'
count = 3
expected = '''
pl('[2] [2]', '[2] [1]')
'''
n = 3

[[test_replace_text]]
id = 'pl-count-4'
obj = '''
pl('[1] [1]', '[1] [1]')
'''
pattern = '\d'
repl = '2'
count = 4
expected = '''
pl('[2] [2]', '[2] [2]')
'''
n = 4

[[test_replace_text]]
id = 'pl-count-5'
obj = '''
pl('[1] [1]', '[1] [1]')
'''
pattern = '\d'
repl = '2'
count = 5
expected = '''
pl('[2] [2]', '[2] [2]')
'''
n = 4

[[test_replace_text]]
id = 'pl-nested'
obj = '''
pl(pl('[1]'))
'''
pattern = '\d'
repl = '2'
count = 1
expected = '''
pl(pl('[2]'))
'''
n = 1


# Unordered lists

[[test_format_text]]
id = 'ul-items-0'
obj = '''
ul()
'''
width = inf
expected = ""

[[test_format_text]]
id = 'ul-items-1'
obj = '''
ul('a')
'''
width = inf
expected = "- a"

[[test_format_text]]
id = 'ul-items-2'
obj = '''
ul('a', 'b')
'''
width = inf
expected = """
- a
- b"""

[[test_format_text]]
id = 'ul-items-falsy'
obj = '''
ul('a', '')
'''
width = inf
expected = "- a"

[[test_format_text]]
id = 'ul-items-falsy'
obj = '''
ul('a', None)
'''
width = inf
expected = "- a"

[[test_format_text]]
id = 'ul-items-falsy'
obj = '''
ul('a', pl())
'''
width = inf
expected = "- a"

[[test_format_text]]
id = 'ul-wrap-1'
obj = '''
ul('a b c')
'''
width = 1
expected = """
- a
  b
  c"""

[[test_format_text]]
id = 'ul-wrap-3'
obj = '''
ul('a b c')
'''
width = 3
expected = """
- a
  b
  c"""

[[test_format_text]]
id = 'ul-wrap-4'
obj = '''
ul('a b c')
'''
width = 4
expected = """
- a
  b
  c"""

[[test_format_text]]
id = 'ul-wrap-5'
obj = '''
ul('a b c')
'''
width = 5
expected = """
- a b
  c"""

[[test_format_text]]
id = 'ul-wrap-6'
obj = '''
ul('a b c')
'''
width = 6
expected = """
- a b
  c"""

[[test_format_text]]
id = 'ul-wrap-7'
obj = '''
ul('a b c')
'''
width = 7
expected = """
- a b c"""

[[test_format_text]]
id = 'ul-wrap-inf'
obj = '''
ul('a b c')
'''
width = inf
expected = """
- a b c"""

[[test_format_text]]
id = 'ul-args-br'
obj = '''
ul('a', 'b', br='\n\n')
'''
width = inf
expected = """
- a

- b"""

[[test_format_text]]
id = 'ul-args-prefix'
obj = '''
ul('a', 'b', prefix='[ ] ')
'''
width = inf
expected = """
[ ] a
[ ] b"""

[[test_format_text]]
id = 'ul-nested-pl'
obj = '''
ul('a', pl('b', 'c'))
'''
width = inf
expected = """
- a
- b

  c"""

[[test_format_text]]
id = 'ul-nested-ul'
obj = '''
ul('a', ul('b', 'c'))
'''
width = inf
expected = """
- a
- - b
  - c"""

[[test_format_text]]
id = 'ul-nested-ol'
obj = '''
ul('a', ol('b', 'c'))
'''
width = inf
expected = """
- a
- 1. b

  2. c"""

[[test_format_text]]
id = 'ul-nested-dl'
obj = '''
ul('a', dl(('b', 'c'), ('d', 'e')))
'''
width = inf
expected = """
- a
- b: c
  d: e"""

[[test_format_text]]
id = 'ul-nested-table'
obj = '''
ul('a', table([['b', 'c'], ['d', 'e']]))
'''
width = inf
expected = """
- a
- b  c
  d  e"""

[[test_format_text]]
id = 'ul-nested-pre'
obj = '''
ul('a b c', pre('d e f'))
'''
width = 5
expected = """
- a b
  c
- d e f"""

[[test_format_text_indents]]
id = 'ul'
obj = '''
ul('a', 'b')
'''
width = inf
initial_indent = '>'
subsequent_indent = ''
expected = """
>
- a
- b"""
  
[[test_format_text_indents]]
id = 'ul'
obj = '''
ul('a', 'b')
'''
width = inf
initial_indent = ''
subsequent_indent = '>'
expected = """
 - a
>- b"""

[[test_format_text_indents]]
id = 'ul'
obj = '''
ul('a', 'b')
'''
width = inf
initial_indent = '>'
subsequent_indent = '>'
expected = """
>- a
>- b"""


[[test_replace_text]]
id = 'ul-empty'
obj = '''
ul()
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
ul()
'''
n = 0

[[test_replace_text]]
id = 'ul-falsy'
obj = '''
ul('')
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
ul('')
'''
n = 0

[[test_replace_text]]
id = 'ul-falsy'
obj = '''
ul(None)
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
ul(None)
'''
n = 0

[[test_replace_text]]
id = 'ul-falsy'
obj = '''
ul(ul())
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
ul(ul())
'''
n = 0

[[test_replace_text]]
id = 'ul-sub-0'
obj = '''
ul('a')
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
ul('a')
'''
n = 0

[[test_replace_text]]
id = 'ul-sub-1'
obj = '''
ul('[1]')
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
ul('[2]')
'''
n = 1

[[test_replace_text]]
id = 'ul-sub-2'
obj = '''
ul('[1]', '[1]')
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
ul('[2]', '[2]')
'''
n = 2

[[test_replace_text]]
id = 'ul-count-1'
obj = '''
ul('[1] [1]', '[1] [1]')
'''
pattern = '\d'
repl = '2'
count = 1
expected = '''
ul('[2] [1]', '[1] [1]')
'''
n = 1

[[test_replace_text]]
id = 'ul-count-2'
obj = '''
ul('[1] [1]', '[1] [1]')
'''
pattern = '\d'
repl = '2'
count = 2
expected = '''
ul('[2] [2]', '[1] [1]')
'''
n = 2

[[test_replace_text]]
id = 'ul-count-3'
obj = '''
ul('[1] [1]', '[1] [1]')
'''
pattern = '\d'
repl = '2'
count = 3
expected = '''
ul('[2] [2]', '[2] [1]')
'''
n = 3

[[test_replace_text]]
id = 'ul-count-4'
obj = '''
ul('[1] [1]', '[1] [1]')
'''
pattern = '\d'
repl = '2'
count = 4
expected = '''
ul('[2] [2]', '[2] [2]')
'''
n = 4

[[test_replace_text]]
id = 'pl-count-5'
obj = '''
pl('[1] [1]', '[1] [1]')
'''
pattern = '\d'
repl = '2'
count = 5
expected = '''
pl('[2] [2]', '[2] [2]')
'''
n = 4

[[test_replace_text]]
id = 'ul-nested'
obj = '''
ul(ul('[1]'))
'''
pattern = '\d'
repl = '2'
count = 1
expected = '''
ul(ul('[2]'))
'''
n = 1


# Ordered lists

[[test_format_text]]
id = 'ol-items-0'
obj = '''
ol()
'''
width = inf
expected = ""

[[test_format_text]]
id = 'ol-items-1'
obj = '''
ol('a')
'''
width = inf
expected = "1. a"

[[test_format_text]]
id = 'ol-items-2'
obj = '''
ol('a', 'b')
'''
width = inf
expected = """
1. a

2. b"""

[[test_format_text]]
id = 'ol-items-falsy'
obj = '''
ol('a', '')
'''
width = inf
expected = "1. a"

[[test_format_text]]
id = 'ol-items-falsy'
obj = '''
ol('a', None)
'''
width = inf
expected = "1. a"

[[test_format_text]]
id = 'ol-items-falsy'
obj = '''
ol('a', ol())
'''
width = inf
expected = "1. a"

[[test_format_text]]
id = 'ol-wrap-1'
obj = '''
ol('a b c')
'''
width = 1
expected = """
1. a
   b
   c"""

[[test_format_text]]
id = 'ol-wrap-4'
obj = '''
ol('a b c')
'''
width = 4
expected = """
1. a
   b
   c"""

[[test_format_text]]
id = 'ol-wrap-5'
obj = '''
ol('a b c')
'''
width = 5
expected = """
1. a
   b
   c"""

[[test_format_text]]
id = 'ol-wrap-6'
obj = '''
ol('a b c')
'''
width = 6
expected = """
1. a b
   c"""

[[test_format_text]]
id = 'ol-wrap-7'
obj = '''
ol('a b c')
'''
width = 7
expected = """
1. a b
   c"""

[[test_format_text]]
id = 'ol-wrap-8'
obj = '''
ol('a b c')
'''
width = 8
expected = """
1. a b c"""

[[test_format_text]]
id = 'ol-wrap-inf'
obj = '''
ol('a b c')
'''
width = inf
expected = """
1. a b c"""

[[test_format_text]]
id = 'ol-args-br'
obj = '''
ol('a', 'b', br='\n')
'''
width = inf
expected = """
1. a
2. b"""

[[test_format_text]]
id = 'ol-args-prefix'
obj = '''
ol('a', 'b', prefix='[{}] ')
'''
width = inf
expected = """
[1] a

[2] b"""

[[test_format_text]]
id = 'ol-args-start'
obj = '''
ol('a', 'b', start=9)
'''
width = inf
expected = """
 9. a

10. b"""

[[test_format_text]]
id = 'ol-args-indices'
obj = '''
ol('a', 'b', indices=[10, 9])
'''
width = inf
expected = """
10. a

 9. b"""

[[test_format_text]]
id = 'ol-nested-pl'
obj = '''
ol('a', pl('b', 'c'))
'''
width = inf
expected = """
1. a

2. b

   c"""

[[test_format_text]]
id = 'ol-nested-ul'
obj = '''
ol('a', ul('b', 'c'))
'''
width = inf
expected = """
1. a

2. - b
   - c"""

[[test_format_text]]
id = 'ol-nested-ol'
obj = '''
ol('a', ol('b', 'c'))
'''
width = inf
expected = """
1. a

2. 1. b

   2. c"""

[[test_format_text]]
id = 'ol-nested-dl'
obj = '''
ol('a', dl(('b', 'c'), ('d', 'e')))
'''
width = inf
expected = """
1. a

2. b: c
   d: e"""

[[test_format_text]]
id = 'ol-nested-table'
obj = '''
ol('a', table([['b', 'c'], ['d', 'e']]))
'''
width = inf
expected = """
1. a

2. b  c
   d  e"""

[[test_format_text]]
id = 'ol-nested-pre'
obj = '''
ol('a b c', pre('d e f'))
'''
width = 6
expected = """
1. a b
   c

2. d e f"""

[[test_format_text_indents]]
id = 'ol'
obj = '''
ol('a', 'b')
'''
width = inf
initial_indent = '>'
subsequent_indent = ''
expected = """
>
1. a

2. b"""
  
[[test_format_text_indents]]
id = 'ol'
obj = '''
ol('a', 'b')
'''
width = inf
initial_indent = ''
subsequent_indent = '>'
expected = """
 1. a

>2. b"""

[[test_format_text_indents]]
id = 'ol'
obj = '''
ol('a', 'b')
'''
width = inf
initial_indent = '>'
subsequent_indent = '>'
expected = """
>1. a

>2. b"""


[[test_replace_text]]
id = 'ol-empty'
obj = '''
ol()
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
ol()
'''
n = 0

[[test_replace_text]]
id = 'ol-falsy'
obj = '''
ol('')
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
ol('')
'''
n = 0

[[test_replace_text]]
id = 'ol-falsy'
obj = '''
ol(None)
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
ol(None)
'''
n = 0

[[test_replace_text]]
id = 'ol-falsy'
obj = '''
ol(ol())
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
ol(ol())
'''
n = 0

[[test_replace_text]]
id = 'ol-sub-0'
obj = '''
ol('a')
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
ol('a')
'''
n = 0

[[test_replace_text]]
id = 'ol-sub-1'
obj = '''
ol('[1]')
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
ol('[2]')
'''
n = 1

[[test_replace_text]]
id = 'ol-sub-2'
obj = '''
ol('[1]', '[1]')
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
ol('[2]', '[2]')
'''
n = 2

[[test_replace_text]]
id = 'ol-count-1'
obj = '''
ol('[1] [1]', '[1] [1]')
'''
pattern = '\d'
repl = '2'
count = 1
expected = '''
ol('[2] [1]', '[1] [1]')
'''
n = 1

[[test_replace_text]]
id = 'ol-count-2'
obj = '''
ol('[1] [1]', '[1] [1]')
'''
pattern = '\d'
repl = '2'
count = 2
expected = '''
ol('[2] [2]', '[1] [1]')
'''
n = 2

[[test_replace_text]]
id = 'ol-count-3'
obj = '''
ol('[1] [1]', '[1] [1]')
'''
pattern = '\d'
repl = '2'
count = 3
expected = '''
ol('[2] [2]', '[2] [1]')
'''
n = 3

[[test_replace_text]]
id = 'ol-count-4'
obj = '''
ol('[1] [1]', '[1] [1]')
'''
pattern = '\d'
repl = '2'
count = 4
expected = '''
ol('[2] [2]', '[2] [2]')
'''
n = 4

[[test_replace_text]]
id = 'pl-count-5'
obj = '''
pl('[1] [1]', '[1] [1]')
'''
pattern = '\d'
repl = '2'
count = 5
expected = '''
pl('[2] [2]', '[2] [2]')
'''
n = 4

[[test_replace_text]]
id = 'ol-nested'
obj = '''
ol(ol('[1]'))
'''
pattern = '\d'
repl = '2'
count = 1
expected = '''
ol(ol('[2]'))
'''
n = 1


# Definition lists

[[test_format_text]]
id = 'dl-items-0'
obj = '''
dl()
'''
width = inf
expected = ""

[[test_format_text]]
id = 'dl-items-1'
obj = '''
dl(('a', 'b'))
'''
width = inf
expected = "a: b"

[[test_format_text]]
id = 'dl-items-2'
obj = '''
dl(('a', 'b'), ('c', 'd'))
'''
width = inf
expected = """
a: b
c: d"""

[[test_format_text]]
id = 'dl-items-falsy'
obj = '''
dl(('a', 'b'), ('c', ''))
'''
width = inf
expected = "a: b"

[[test_format_text]]
id = 'dl-items-falsy'
obj = '''
dl(('a', 'b'), ('c', None))
'''
width = inf
expected = "a: b"

[[test_format_text]]
id = 'dl-items-falsy'
obj = '''
dl(('a', 'b'), ('c', dl()))
'''
width = inf
expected = "a: b"

[[test_format_text]]
id = 'dl-items-falsy-trailing'
obj = '''
dl(('a', None), ('b', 'c'))
'''
width = inf
expected = "b: c"

[[test_format_text]]
id = 'dl-wrap-1'
obj = '''
dl(('a b', 'c d e'))
'''
width = 1
# I think the 'c' should be wrapped, but that's not how textwrap works.
expected = """
a b: c
  d
  e"""

[[test_format_text]]
id = 'dl-wrap-6'
obj = '''
dl(('a b', 'c d e'))
'''
width = 6
expected = """
a b: c
  d e"""

[[test_format_text]]
id = 'dl-wrap-7'
obj = '''
dl(('a b', 'c d e'))
'''
width = 7
expected = """
a b: c
  d e"""

[[test_format_text]]
id = 'dl-wrap-8'
obj = '''
dl(('a b', 'c d e'))
'''
width = 8
expected = """
a b: c d
  e"""

[[test_format_text]]
id = 'dl-wrap-9'
obj = '''
dl(('a b', 'c d e'))
'''
width = 9
expected = """
a b: c d
  e"""

[[test_format_text]]
id = 'dl-wrap-10'
obj = '''
dl(('a b', 'c d e'))
'''
width = 10
expected = """
a b: c d e"""

[[test_format_text]]
id = 'dl-wrap-inf'
obj = '''
dl(('a b', 'c d e'))
'''
width = inf
expected = """
a b: c d e"""

[[test_format_text]]
id = 'dl-args-br'
obj = '''
dl(('a', 'b'), ('c', 'd'), br='\n\n')
'''
width = inf
expected = """
a: b

c: d"""

[[test_format_text]]
id = 'dl-args-prefix'
obj = '''
dl(('a', 'b'), ('c', 'd'), prefix='{} => ')
'''
width = inf
expected = """
a => b
c => d"""

[[test_format_text]]
id = 'dl-args-prefix'
obj = '''
dl(('a', 'b'), ('c', 'd'), prefix='{}:\n')
'''
width = inf
expected = """
a:
  b
c:
  d"""

[[test_format_text]]
id = 'dl-args-indent'
obj = '''
dl(('a', 'b c'), ('d', 'e f g h i'), indent='~')
'''
width = 4
expected = """
a: b
~c
d: e
~f g
~h i"""

[[test_format_text]]
id = 'dl-nested-pl'
obj = '''
dl(
  ('a', 'b'),
  ('c', pl('d e f g', 'h i j k')),
)
'''
width = 6
# Note that paragraphs don't need to be aligned.
expected = """
a: b
c: d e
  f g

  h i
  j k"""

[[test_format_text]]
id = 'dl-nested-ul'
obj = '''
dl(
  ('a', 'b'),
  ('c', ul('d', 'e')),
)
'''
width = inf
expected = """
a: b
c: 
  - d
  - e"""

[[test_format_text]]
id = 'dl-nested-ul'
obj = '''
dl(
  ('a', 'b'),
  ('c', ul('d', 'e')),
  indent=3*' ',
)
'''
width = inf
expected = """
a: b
c: - d
   - e"""

[[test_format_text]]
id = 'dl-nested-ul'
obj = '''
dl(
  ('a', 'b'),
  ('c', ul('d', 'e')),
  prefix='{}:\n',
  indent=3*' ',
)
'''
width = inf
expected = """
a:
   b
c:
   - d
   - e"""

[[test_format_text]]
id = 'dl-nested-ol'
obj = '''
dl(
  ('a', 'b'),
  ('c', ol('d', 'e')),
)
'''
width = inf
expected = """
a: b
c: 
  1. d

  2. e"""

[[test_format_text]]
id = 'dl-nested-ol'
obj = '''
dl(
  ('a', 'b'),
  ('c', ol('d', 'e')),
  indent=3*' ',
)
'''
width = inf
expected = """
a: b
c: 1. d

   2. e"""

[[test_format_text]]
id = 'dl-nested-ol'
obj = '''
dl(
  ('a', 'b'),
  ('c', ol('d', 'e')),
  prefix='{}:\n',
  indent=3*' ',
)
'''
width = inf
expected = """
a:
   b
c:
   1. d

   2. e"""

[[test_format_text]]
id = 'dl-nested-dl'
obj = '''
dl(
  ('a', 'b'),
  ('c', dl(('d', 'e'), ('f', 'g'))),
)
'''
width = inf
expected = """
a: b
c: 
  d: e
  f: g"""

[[test_format_text]]
id = 'dl-nested-dl'
obj = '''
dl(
  ('a', 'b'),
  ('c', dl(('d', 'e'), ('f', 'g'))),
  indent=3*' ',
)
'''
width = inf
expected = """
a: b
c: d: e
   f: g"""

[[test_format_text]]
id = 'dl-nested-dl'
obj = '''
dl(
  ('a', 'b'),
  ('c', dl(('d', 'e'), ('f', 'g'))),
  prefix='{}:\n',
  indent=3*' ',
)
'''
width = inf
expected = """
a:
   b
c:
   d: e
   f: g"""

[[test_format_text]]
id = 'dl-nested-table'
obj = '''
dl(
  ('a', 'b'),
  ('c', table([['d', 'e'], ['f', 'g']])),
)
'''
width = inf
expected = """
a: b
c: 
  d  e
  f  g"""

[[test_format_text]]
id = 'dl-nested-table'
obj = '''
dl(
  ('a', 'b'),
  ('c', table([['d', 'e'], ['f', 'g']])),
  indent=3*' ',
)
'''
width = inf
expected = """
a: b
c: d  e
   f  g"""

[[test_format_text]]
id = 'dl-nested-table'
obj = '''
dl(
  ('a', 'b'),
  ('c', table([['d', 'e'], ['f', 'g']])),
  prefix='{}:\n',
  indent=3*' ',
)
'''
width = inf
expected = """
a:
   b
c:
   d  e
   f  g"""

[[test_format_text]]
id = 'dl-nested-pre'
obj = '''
dl(
  ('a', 'b c'),
  ('d', pre('e f')),
)
'''
width = 4
expected = """
a: b
  c
d: e f"""

[[test_format_text]]
id = 'dl-nested-pre'
obj = '''
dl(
  ('a', 'b'),
  ('c', pre('d\ne')),
)
'''
width = inf
expected = """
a: b
c: 
  d
  e"""

[[test_format_text]]
id = 'dl-nested-pre'
obj = '''
dl(
  ('a', 'b'),
  ('c', pre('d\ne')),
  indent=3*' ',
)
'''
width = inf
expected = """
a: b
c: d
   e"""

[[test_format_text]]
id = 'dl-nested-pre'
obj = '''
dl(
  ('a', 'b'),
  ('c', pre('d\ne')),
  prefix='{}:\n',
  indent=3*' ',
)
'''
width = inf
expected = """
a:
   b
c:
   d
   e"""

[[test_format_text_indents]]
id = 'dl'
obj = '''
dl(('a', 'b'), ('c', 'd'))
'''
width = inf
initial_indent = '>'
subsequent_indent = ''
expected = """
>
a: b
c: d"""
  
[[test_format_text_indents]]
id = 'dl'
obj = '''
dl(('a', 'b'), ('c', 'd'))
'''
width = inf
initial_indent = ''
subsequent_indent = '>'
expected = """
 a: b
>c: d"""

[[test_format_text_indents]]
id = 'dl'
obj = '''
dl(('a', 'b'), ('c', 'd'))
'''
width = inf
initial_indent = '>'
subsequent_indent = '>'
expected = """
>a: b
>c: d"""


[[test_replace_text]]
id = 'dl-empty'
obj = '''
dl()
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
dl()
'''
n = 0

[[test_replace_text]]
id = 'dl-falsy'
obj = '''
dl(('a', ''))
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
dl(('a', ''))
'''
n = 0

[[test_replace_text]]
id = 'dl-falsy'
obj = '''
dl(('a', None))
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
dl(('a', None))
'''
n = 0

[[test_replace_text]]
id = 'dl-falsy'
obj = '''
dl(('a', dl()))
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
dl(('a', dl()))
'''
n = 0

[[test_replace_text]]
id = 'dl-sub-0'
obj = '''
dl(('a', 'b'))
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
dl(('a', 'b'))
'''
n = 0

[[test_replace_text]]
id = 'dl-sub-1'
obj = '''
dl(('[1]', 'a'))
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
dl(('[2]', 'a'))
'''
n = 1

[[test_replace_text]]
id = 'dl-sub-1'
obj = '''
dl(('a', '[1]'))
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
dl(('a', '[2]'))
'''
n = 1

[[test_replace_text]]
id = 'dl-sub-2'
obj = '''
dl(('[1]', '[1]'))
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
dl(('[2]', '[2]'))
'''
n = 2

[[test_replace_text]]
id = 'dl-sub-2'
obj = '''
dl(('[1]', 'a'), ('[1]', 'b'))
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
dl(('[2]', 'a'), ('[2]', 'b'))
'''
n = 2

[[test_replace_text]]
id = 'dl-sub-2'
obj = '''
dl(('a', '[1]'), ('b', '[1]'))
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
dl(('a', '[2]'), ('b', '[2]'))
'''
n = 2

[[test_replace_text]]
id = 'dl-count-1'
obj = '''
dl(('[1]', '[1]'), ('[1]', '[1]'))
'''
pattern = '\d'
repl = '2'
count = 1
expected = '''
dl(('[2]', '[1]'), ('[1]', '[1]'))
'''
n = 1

[[test_replace_text]]
id = 'dl-count-2'
obj = '''
dl(('[1]', '[1]'), ('[1]', '[1]'))
'''
pattern = '\d'
repl = '2'
count = 2
expected = '''
dl(('[2]', '[2]'), ('[1]', '[1]'))
'''
n = 2

[[test_replace_text]]
id = 'dl-count-3'
obj = '''
dl(('[1]', '[1]'), ('[1]', '[1]'))
'''
pattern = '\d'
repl = '2'
count = 3
expected = '''
dl(('[2]', '[2]'), ('[2]', '[1]'))
'''
n = 3

[[test_replace_text]]
id = 'dl-count-4'
obj = '''
dl(('[1]', '[1]'), ('[1]', '[1]'))
'''
pattern = '\d'
repl = '2'
count = 4
expected = '''
dl(('[2]', '[2]'), ('[2]', '[2]'))
'''
n = 4

[[test_replace_text]]
id = 'dl-count-5'
obj = '''
dl(('[1]', '[1]'), ('[1]', '[1]'))
'''
pattern = '\d'
repl = '2'
count = 5
expected = '''
dl(('[2]', '[2]'), ('[2]', '[2]'))
'''
n = 4

[[test_replace_text]]
id = 'dl-nested'
obj = '''
dl(('a', dl(('b', '[1]'))))
'''
pattern = '\d'
repl = '2'
count = 1
expected = '''
dl(('a', dl(('b', '[2]'))))
'''
n = 1


# Tables

[[test_format_text]]
id = 'table-empty'
obj = '''
table([[]])
'''
width = inf
expected = ""

[[test_format_text]]
id = 'table-rows-1'
obj = '''
table([['a', 'b']])
'''
width = inf
expected = "a  b"

[[test_format_text]]
id = 'table-rows-2'
obj = '''
table([['a', 'b'], ['c', 'd']])
'''
width = inf
expected = """
a  b
c  d"""

[[test_format_text]]
id = 'table-args-header'
obj = '''
table(
  [['c', 'd'], ['e', 'f']],
  header=['a', 'b'],
)
'''
width = inf
expected = """
a  b
────
c  d
e  f"""

[[test_format_text]]
id = 'table-args-footer'
obj = '''
table(
  [['a', 'b'], ['c', 'd']],
  footer=['e', 'f'],
)
'''
width = inf
expected = """
a  b
c  d
────
e  f"""

[[test_format_text_indents]]
obj = '''
table([['a', 'b'], ['c', 'd']])
'''
width = inf
initial_indent = '>'
subsequent_indent = ''
expected = """
>
a  b
c  d"""
  
[[test_format_text_indents]]
obj = '''
table([['a', 'b'], ['c', 'd']])
'''
width = inf
initial_indent = ''
subsequent_indent = '>'
expected = """
 a  b
>c  d"""

[[test_format_text_indents]]
obj = '''
table([['a', 'b'], ['c', 'd']])
'''
width = inf
initial_indent = '>'
subsequent_indent = '>'
expected = """
>a  b
>c  d"""


[[test_replace_text]]
id = 'table-empty'
obj = '''
table([[]])
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
table([[]])
'''
n = 0

[[test_replace_text]]
id = 'table-sub-0'
obj = '''
table([['a', 'b'], ['c', 'd']])
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
table([['a', 'b'], ['c', 'd']])
'''
n = 0

[[test_replace_text]]
id = 'table-sub-1'
obj = '''
table([['[1]', 'b'], ['c', 'd']])
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
table([['[2]', 'b'], ['c', 'd']])
'''
n = 1

[[test_replace_text]]
id = 'table-sub-2'
obj = '''
table([['[1]', '[1]'], ['c', 'd']])
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
table([['[2]', '[2]'], ['c', 'd']])
'''
n = 2

[[test_replace_text]]
id = 'table-sub-2'
obj = '''
table([['[1]', 'b'], ['[1]', 'd']])
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
table([['[2]', 'b'], ['[2]', 'd']])
'''
n = 2

[[test_replace_text]]
id = 'table-header'
obj = '''
table([['a', 'b'], ['c', 'd']], header=['[1]', 'f'])
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
table([['a', 'b'], ['c', 'd']], header=['[2]', 'f'])
'''
n = 1

[[test_replace_text]]
id = 'table-footer'
obj = '''
table([['a', 'b'], ['c', 'd']], footer=['[1]', 'f'])
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
table([['a', 'b'], ['c', 'd']], footer=['[2]', 'f'])
'''
n = 1

[[test_replace_text]]
id = 'table-count-1'
obj = '''
table(
  [['[1]', '[1]'], ['[1]', '[1]']],
  header=['[1]', '[1]'],
  footer=['[1]', '[1]'],
)
'''
pattern = '\d'
repl = '2'
count = 1
expected = '''
table(
  [['[1]', '[1]'], ['[1]', '[1]']],
  header=['[2]', '[1]'],
  footer=['[1]', '[1]'],
)
'''
n = 1

[[test_replace_text]]
id = 'table-count-2'
obj = '''
table(
  [['[1]', '[1]'], ['[1]', '[1]']],
  header=['[1]', '[1]'],
  footer=['[1]', '[1]'],
)
'''
pattern = '\d'
repl = '2'
count = 2
expected = '''
table(
  [['[1]', '[1]'], ['[1]', '[1]']],
  header=['[2]', '[2]'],
  footer=['[1]', '[1]'],
)
'''
n = 2

[[test_replace_text]]
id = 'table-count-3'
obj = '''
table(
  [['[1]', '[1]'], ['[1]', '[1]']],
  header=['[1]', '[1]'],
  footer=['[1]', '[1]'],
)
'''
pattern = '\d'
repl = '2'
count = 3
expected = '''
table(
  [['[2]', '[1]'], ['[1]', '[1]']],
  header=['[2]', '[2]'],
  footer=['[1]', '[1]'],
)
'''
n = 3

[[test_replace_text]]
id = 'table-count-4'
obj = '''
table(
  [['[1]', '[1]'], ['[1]', '[1]']],
  header=['[1]', '[1]'],
  footer=['[1]', '[1]'],
)
'''
pattern = '\d'
repl = '2'
count = 4
expected = '''
table(
  [['[2]', '[2]'], ['[1]', '[1]']],
  header=['[2]', '[2]'],
  footer=['[1]', '[1]'],
)
'''
n = 4

[[test_replace_text]]
id = 'table-count-5'
obj = '''
table(
  [['[1]', '[1]'], ['[1]', '[1]']],
  header=['[1]', '[1]'],
  footer=['[1]', '[1]'],
)
'''
pattern = '\d'
repl = '2'
count = 5
expected = '''
table(
  [['[2]', '[2]'], ['[2]', '[1]']],
  header=['[2]', '[2]'],
  footer=['[1]', '[1]'],
)
'''
n = 5

[[test_replace_text]]
id = 'table-count-6'
obj = '''
table(
  [['[1]', '[1]'], ['[1]', '[1]']],
  header=['[1]', '[1]'],
  footer=['[1]', '[1]'],
)
'''
pattern = '\d'
repl = '2'
count = 6
expected = '''
table(
  [['[2]', '[2]'], ['[2]', '[2]']],
  header=['[2]', '[2]'],
  footer=['[1]', '[1]'],
)
'''
n = 6

[[test_replace_text]]
id = 'table-count-7'
obj = '''
table(
  [['[1]', '[1]'], ['[1]', '[1]']],
  header=['[1]', '[1]'],
  footer=['[1]', '[1]'],
)
'''
pattern = '\d'
repl = '2'
count = 7
expected = '''
table(
  [['[2]', '[2]'], ['[2]', '[2]']],
  header=['[2]', '[2]'],
  footer=['[2]', '[1]'],
)
'''
n = 7

[[test_replace_text]]
id = 'table-count-8'
obj = '''
table(
  [['[1]', '[1]'], ['[1]', '[1]']],
  header=['[1]', '[1]'],
  footer=['[1]', '[1]'],
)
'''
pattern = '\d'
repl = '2'
count = 8
expected = '''
table(
  [['[2]', '[2]'], ['[2]', '[2]']],
  header=['[2]', '[2]'],
  footer=['[2]', '[2]'],
)
'''
n = 8

[[test_replace_text]]
id = 'table-count-9'
obj = '''
table(
  [['[1]', '[1]'], ['[1]', '[1]']],
  header=['[1]', '[1]'],
  footer=['[1]', '[1]'],
)
'''
pattern = '\d'
repl = '2'
count = 9
expected = '''
table(
  [['[2]', '[2]'], ['[2]', '[2]']],
  header=['[2]', '[2]'],
  footer=['[2]', '[2]'],
)
'''
n = 8

[[test_replace_text]]
id = 'table-nested'
obj = '''
table([['a', 'b'], ['c', table([['[1]']])]])
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
table([['a', 'b'], ['c', table([['[2]']])]])
'''
n = 1


# Master mixes

# Preformatted

[[test_format_text]]
obj = '''
pre("")
'''
width = 1
expected = ""

[[test_format_text]]
obj = '''
pre("a")
'''
width = 1
expected = "a"

[[test_format_text]]
obj = '''
pre("a b")
'''
width = 1
expected = "a b"

[[test_format_text]]
obj = '''
pre("a\nb")
'''
width = 1
expected = "a\nb"

[[test_format_text]]
obj = '''
pre("a b\nc d")
'''
width = 1
expected = "a b\nc d"

[[test_format_text_indents]]
obj = '''
pre('a\nb')
'''
width = inf
initial_indent = '>'
subsequent_indent = ''
expected = """
>
a
b"""
  
[[test_format_text_indents]]
obj = '''
pre('a\nb')
'''
width = inf
initial_indent = ''
subsequent_indent = '>'
expected = """
 a
>b"""

[[test_format_text_indents]]
obj = '''
pre('a\nb')
'''
width = inf
initial_indent = '>'
subsequent_indent = '>'
expected = """
>a
>b"""


[[test_replace_text]]
id = 'pre-empty'
obj = '''
pre('')
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
pre('')
'''
n = 0

[[test_replace_text]]
id = 'pre-sub-0'
obj = '''
pre('a')
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
pre('a')
'''
n = 0

[[test_replace_text]]
id = 'pre-sub-1'
obj = '''
pre('[1]')
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
pre('[2]')
'''
n = 1

[[test_replace_text]]
id = 'pre-sub-2'
obj = '''
pre('[1] [1]')
'''
pattern = '\d'
repl = '2'
count = 0
expected = '''
pre('[2] [2]')
'''
n = 2

[[test_replace_text]]
id = 'pre-count-1'
obj = '''
pre('[1] [1]')
'''
pattern = '\d'
repl = '2'
count = 1
expected = '''
pre('[2] [1]')
'''
n = 1

[[test_replace_text]]
id = 'pre-count-2'
obj = '''
pre('[1] [1]')
'''
pattern = '\d'
repl = '2'
count = 2
expected = '''
pre('[2] [2]')
'''
n = 2

[[test_replace_text]]
id = 'pre-count-3'
obj = '''
pre('[1] [1]')
'''
pattern = '\d'
repl = '2'
count = 3
expected = '''
pre('[2] [2]')
'''
n = 2


[[test_step_from_str]]
id = 'step'
step = "a"
delim = '~'
wrap = true
expected = '''
'a'
'''

[[test_step_from_str]]
id = 'step'
step = "a~b"
delim = '~'
wrap = true
expected = '''
pl('a', ul('b'))
'''

[[test_step_from_str]]
id = 'step'
step = "a~b~c"
delim = '~'
wrap = true
expected = '''
pl('a', ul('b', 'c'))
'''

[[test_step_from_str]]
id = 'step'
step = "a~b~~c"
delim = '~'
wrap = true
expected = '''
pl('a', ul(pl('b', ul('c'))))
'''

[[test_step_from_str]]
id = 'step'
step = "a~b~c~~d"
delim = '~'
wrap = true
expected = '''
pl('a', ul('b', pl('c', ul('d'))))
'''

[[test_step_from_str]]
id = 'step'
step = "a~b~~c~d"
delim = '~'
wrap = true
expected = '''
pl('a', ul(pl('b', ul('c')), 'd'))
'''

[[test_step_from_str]]
id = 'delim'
step = "a~b"
delim = ';'
wrap = true
expected = '''
'a~b'
'''

[[test_step_from_str]]
id = 'delim'
step = "a;b"
delim = ';'
wrap = true
expected = '''
pl('a', ul('b'))
'''

[[test_step_from_str]]
id = 'wrap'
step = "a"
delim = '~'
wrap = false
expected = '''
pre('a')
'''

[[test_step_from_str]]
id = 'wrap'
step = "a~b"
delim = '~'
wrap = false
expected = '''
pl(pre('a'), ul(pre('b')))
'''

[[test_step_from_str]]
id = 'wrap'
step = "a~b~~c"
delim = '~'
wrap = false
expected = '''
pl(
  pre('a'),
  ul(
    pl(
      pre('b'),
      ul(
        pre('c'),
      ),
    ),
  ),
)
'''

[[test_split_by_delim_count]]
str = ''
delim = '~'
count = 1
expected = ['']

[[test_split_by_delim_count]]
str = 'a'
delim = '~'
count = 1
expected = ['a']

[[test_split_by_delim_count]]
str = '~'
delim = '~'
count = 1
expected = ['', '']

[[test_split_by_delim_count]]
str = 'a~'
delim = '~'
count = 1
expected = ['a', '']

[[test_split_by_delim_count]]
str = '~a'
delim = '~'
count = 1
expected = ['', 'a']

[[test_split_by_delim_count]]
str = 'a~b'
delim = '~'
count = 1
expected = ['a', 'b']

[[test_split_by_delim_count]]
str = '~~'
delim = '~'
count = 1
expected = ['~~']

[[test_split_by_delim_count]]
str = 'a~~'
delim = '~'
count = 1
expected = ['a~~']

[[test_split_by_delim_count]]
str = '~~a'
delim = '~'
count = 1
expected = ['~~a']

[[test_split_by_delim_count]]
str = 'a~~b'
delim = '~'
count = 1
expected = ['a~~b']

[[test_split_by_delim_count]]
str = 'a~b~~c~~d~e~~f~~g'
delim = '~'
count = 1
expected = ['a', 'b~~c~~d', 'e~~f~~g']

[[test_split_by_delim_count]]
str = ''
delim = '~'
count = 2
expected = ['']

[[test_split_by_delim_count]]
str = 'a'
delim = '~'
count = 2
expected = ['a']

[[test_split_by_delim_count]]
str = '~'
delim = '~'
count = 2
expected = ['~']

[[test_split_by_delim_count]]
str = 'a~'
delim = '~'
count = 2
expected = ['a~']

[[test_split_by_delim_count]]
str = '~a'
delim = '~'
count = 2
expected = ['~a']

[[test_split_by_delim_count]]
str = 'a~b'
delim = '~'
count = 2
expected = ['a~b']

[[test_split_by_delim_count]]
str = '~~'
delim = '~'
count = 2
expected = ['', '']

[[test_split_by_delim_count]]
str = 'a~~'
delim = '~'
count = 2
expected = ['a', '']

[[test_split_by_delim_count]]
str = '~~a'
delim = '~'
count = 2
expected = ['', 'a']

[[test_split_by_delim_count]]
str = 'a~~b'
delim = '~'
count = 2
expected = ['a', 'b']

[[test_split_by_delim_count]]
str = 'a~b~~c~~d~e~~f~~g'
delim = '~'
count = 2
expected = ['a~b', 'c', 'd~e', 'f', 'g']

