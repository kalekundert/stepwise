test_stepwise_config:
  -
    id: intro
    files:
      user/conf.toml:
        > x = 'a'
      site/conf.toml:
        > x = 'b'
      plugin_c/conf.toml:
        > x = 'c'
      plugin_d/conf.toml:
        > x = 'd'
      plugin_e/conf.toml:
        > x = 'e'
      plugin_f/conf.toml:
        > x = 'f'

    appdirs:
      user_dir: user/
      site_dir: site/

    plugins:
      stepwise.protocols:
        -
          > class MockPlugin:
          >     config_path = 'plugin_f/conf.toml'
          >     priority = 1
        -
          > class MockPlugin:
          >     config_path = 'plugin_d/conf.toml'
          >     priority = 3

      stepwise.commands:
        -
          > class MockPlugin:
          >     config_path = 'plugin_c/conf.toml'
          >     priority = 4
        -
          > class MockPlugin:
          >     config_path = 'plugin_e/conf.toml'
          >     priority = 2

    expected:
      x: ['a', 'b', 'c', 'd', 'e', 'f']

    config_paths:
      - user/conf.toml
      - site/conf.toml
  -
    id: class-attrs
    files:
      user/conf.toml:
        > x.y = 1

    appdirs:
      user_dir: user/
      site_dir: site/

    config_factory:
      > class MockConfig(StepwiseConfig):
      >     root_key = 'x'
      >     schema = lambda d: {'y': d['y'] + 1}

    expected:
      y: [2]

    config_paths:
      - user/conf.toml
      - site/conf.toml
  -
    id: setup-args
    files:
      user/conf.toml:
        > x.y = 1

    appdirs:
      user_dir: user/
      site_dir: site/

    config_factory:
      > MockConfig = StepwiseConfig.setup(
      >     'x',
      >     schema=lambda d: {'y': d['y'] + 1},
      > )

    expected:
      y: [2]

    config_paths:
      - user/conf.toml
      - site/conf.toml

test_preset_config:
  -
    id: defaults
    obj:
      > obj = MockObj()
      > obj.preset = 'a'
      > obj.presets = [{
      >     'a': {
      >         'x': 1,
      >     },
      >     'b': {
      >         'x': 2,
      >     },
      > }]
    key: 'x'
    expected:
      - 1
  -
    id: getters
    config_factory:
      > class MockConfig(PresetConfig):
      >     presets_getter = attrgetter('my_presets')
      >     key_getter = attrgetter('my_key')
    obj:
      > obj = MockObj()
      > obj.my_key = 'a'
      > obj.my_presets = [{
      >     'a': {
      >         'x': 1,
      >     },
      >     'b': {
      >         'x': 2,
      >     },
      > }]
    key: 'x'
    expected:
      - 1
  -
    id: briefs
    obj:
      > obj = MockObj()
      > obj.preset = 'a'
      > obj.presets = [{
      >     'a': {
      >         'x': 1,
      >         'brief': 'Lorem ipsum.',
      >     },
      >     'b': {
      >         'x': 2,
      >         'brief': 'Dolor sit amet.',
      >     },
      > }]
    key: 'x'
    expected:
      - 1
    briefs:
      > a:  Lorem ipsum.
      > b:  Dolor sit amet.
  -
    id: briefs-template
    obj:
      > obj = MockObj()
      > obj.preset = 'a'
      > obj.presets = [{
      >     'a': {
      >         'x': 1,
      >     },
      >     'b': {
      >         'x': 2,
      >     },
      > }]
      > obj.preset_brief_template = 'x={x}'
    key: 'x'
    expected:
      - 1
    briefs:
      > a:  x=1
      > b:  x=2
  -
    id: briefs-truncate
    obj:
      > obj = MockObj()
      > obj.preset = 'a'
      > obj.presets = [{
      >     'a': {
      >         'x': 1,
      >         'brief': '5678',
      >     },
      >     'b': {
      >         'x': 2,
      >         'brief': '56789',
      >     },
      > }]
      > obj.preset_brief_max_width = 8
    key: 'x'
    expected:
      - 1
    briefs:
      > a:  5678
      > b:  567â€¦

test_presets:
  -
    presets:
      -
        a:
          x: 1

    expected:
      a:
        x: 1
  -
    presets:
      -
        a:
          x: 1
          y: 1
          z: 1
        b:
          inherit: a
          y: 2
          z: 2
        c:
          inherit: b
          z: 3

    expected:
      a:
        x: 1
        y: 1
        z: 1
      b:
        x: 1
        y: 2
        z: 2
      c:
        x: 1
        y: 2
        z: 3

  -
    presets:
      -
        a:
          x: 1
          y: 1
      -
        b:
          inherit: a
          y: 2

    expected:
      a:
        x: 1
        y: 1
      b:
        x: 1
        y: 2
  -
    presets:
      -
        a:
          inherit: b
          y: 1
      -
        b:
          x: 2
          y: 2

    expected:
      a:
        x: 2
        y: 1
      b:
        x: 2
        y: 2
  -
    presets:
      -
        a:
          x: 1
          y: 1
      -
        a:
          x: 2
          y: 2
        b:
          inherit: a
          y: 3

    expected:
      a:
        x: 1
        y: 1
      b:
        x: 1
        y: 3
  -
    presets:
      -
        a:
          x: 1
          y: 1
          z: 1
        b:
          inherit: a
          y: 2
          z: 2
      -
        b:
          x: 3
          y: 3
          z: 3
        c:
          inherit: b
          z: 4

    expected:
      a:
        x: 1
        y: 1
        z: 1
      b:
        x: 1
        y: 2
        z: 2
      c:
        x: 1
        y: 2
        z: 4
  -
    presets:
      -
        a:
          inherit: a
          y: 1
      -
        a:
          x: 2
          y: 2

    expected:
      a:
        x: 2
        y: 1

test_presets_err:
  -
    presets:
      -
        a:
          x: 1

    key: 'b'
    error:
      type: KeyError
      message: no preset 'b', did you mean 'a'

  -
    presets:
      -
        a:
          x: 1
    key: 1
    error:
      type: KeyError
      message: no preset 1, did you mean 'a'
